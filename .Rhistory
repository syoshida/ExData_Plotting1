cachemean(mk2)
?solve
makeCacheMatrix <- function(x = numeric()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inverse
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
mc <- makeCacheMatrix(matrix(1:4), nrow=2, ncol=3)
mc <- makeCacheMatrix(matrix(1:4, nrow=2, ncol=3))
mc
mc$get()
c(1:4, nrow=2, ncol=3)
matrix(1:4, nrow=2, ncol=3)
matrix(1:4, nrow=2, ncol=2)
mc <- makeCacheMatrix(matrix(1:4, nrow=2, ncol=2))
mc$get()
m(c(1,0,1,0), nrow=2, ncol=3)
matrix(c(1,0,1,0), nrow=2, ncol=3)
matrix(c(1,0,1,0), nrow=2, ncol=2)
matrix(c(1,0,0,1), nrow=2, ncol=2)
makeCacheMatrix <- function(x = numeric()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(x) inv <<- solve(x)
getInverse <- function() inverse
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
mc <- makeCache(matrix(c(1,0,0,1), nrow=2, ncol=2))
mc <- makeCacheMatrix(matrix(c(1,0,0,1), nrow=2, ncol=2))
mc
mc$get()
mc$set()
mc$setInverse()
mc$setInverse(mc$get())
mc$getInverse()
mc$getInverse()
makeCacheMatrix <- function(x = numeric()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(x) inv <<- solve(x)
getInverse <- function() inv
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
makeCacheMatrix <- function(x = numeric()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(x) inv <<- solve(x)
getInverse <- function() inv
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
mc <- makeCacheMatrix(matrix(c(1,0,0,1), nrow=2, ncol=2))
mc$setInverse(mc$get())
mc$getInverse()
solve(mc$get())
?solve
cacheSolve <- function(x, ...) {
mtx = x$get()
if (!is.null(mtx)) {
message("getting cached data")
return(mtx)
}
data <- x$get()
inverse <- solve(data, ...)
x$setInverse(inverse)
inverse
}
}
cacheSolve <- function(x, ...) {
mtx = x$get()
if (!is.null(mtx)) {
message("getting cached data")
return(mtx)
}
data <- x$get()
inverse <- solve(data, ...)
x$setInverse(inverse)
inverse
}
cacheSolve(mc)
mc$set(matrix(c(2,0,0,2)))
cacheSolve(mc)
mc$get()
mc$set(matrix(c(2,0,0,2), nrow=2, ncol=2))
cacheSolve(mc)
cacheSolve <- function(x, ...) {
inverse = x$getInverse()
if (!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
m <- x$get()
inverse <- solve(m, ...)
x$setInverse(inverse)
inverse
}
cacheSolve(mc)
cacheSolve(mc)
cacheSolve(mc)
mc$set(matrix(c(4,0,0,4), nrow=2,ncol=2))
cacheSolve(mc)
cacheSolve(mc)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse = x$getInverse()
if (!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
m <- x$get()
inverse <- solve(m, ...)
x$setInverse(inverse)
inverse
}
mc <- makeCacheMatrix(matrix(c(1,0,0,1), nrow=2, ncol=2))
mc$get()
cacheSolve(mc)
cacheSolve(mc)
mc$set(matrix(c(10,0,0,10), nrow=2, ncol=2))
cacheSolve(mc)
cacheSolve(mc)
#
# makeCacheMatrix:
# This function consists of four sub functions to create a special "matrix" object that can cache its inverse.
# 1. set(y = matrix()): set the value of the matrix
# 2. get(): return the matrix
# 3. setInverse(inverse = matrix()): set the inverse of the matrix for caching
# 4. getInverse(): get the inverse of the matrix
#
# cacheSolve:
# This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
# If the inverse has already been calculated (and the matrix has not changed),
# then the inverse is returned from the cache.
#
#  Creates a special "matrix" object that can cache its inverse.
#
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
#
# Computes the inverse of the special "matrix" returned by makeCacheMatrix.
# Return the inverse value from the cache when it has been calculated
#
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse = x$getInverse()
if (!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
m <- x$get()
inverse <- solve(m, ...)
x$setInverse(inverse)
inverse
}
mc <- makeCacheMatrix(matrix(c(1,0,0,1), nrow=2, ncol=2))
cacheSolve(mc)
cacheSolve(mc)
mc$set(matrix(c(4,0,0,4), nrow=2,ncol=2))
cacheSolve(mc)
cacheSolve(mc)
x <- list(a = 1:4, b = rnorm(10), c = rnorm(20, 1), d = rnorm(100,5))
x
lapply(x, mean)
?runif
x <- 1:4
lapply (x, runif)
x <- list(a = matrix(1:4, 2, 2), b = matrix(1:6, 3,2))
x
lapply(x, funciton(elt), elt[,1])
lapply(x, funciton(elt) elt[,1])
lapply(x,  function(elt) elt[,1])
lapply(x,  function(elt) elt[1,])
x <- list (a=1:4, b=rnorm(10), c=rnorm(20,1), d=rnorm(100,5))
x
lapply(x, mean)
sapply(x, mean)
list(rep(1,4), rep(2,3), rep(3,2), rep(4,1))
mapply(rep, 1:4, 4:1)
mapply(rep, 1:4)
rep(1,4)
mapply(rep, 1,2,3,4)
mapply(rep, 1,2,3,4, 4,3,2,1)
mapply(rep c(1,2,3,4))
mapply(rep, c(1,2,3,4))
mapply(rep, c(1,2,3,4), c(4,3,2,1))
rep(1,4)
rep(2,3)
?rep
?noise
?noise
noise <- function(n, mean, sd) {
rnorm(n, mean, sd)
}
?rnorm
noise(5, 1, 2)
mapply(noise, 1:5, 1:5, 2)
mapply(noise, 1:5, 1:5, 2, simplyfy=true)
?mapply
mapply(noise, 1:5, 1:5, 2, SIMPLIFY=TRUE)
mapply(noise, 1:5, 1:5, 2, SIMPLIFY=FALSE)
x <- c(rnorm(10), runif(10), rnorm(10, 1))
x
?gl
f <- gl(1,2)
f
f <- gl(1,3)
f
f <- gl(2,3)
f
f <- gl(3,3)
f
f <- gl(3,4)
f
f <- gl(3,10)
f
tapply(x, f, mean)
?rnorm
mean(rnorm(10,1))
mean(rnorm(10,1))
mean(rnorm(10,1))
rnorm(10,1)
rnorm(10,3)
tapply(x, f, mean)
tapply(x, f, mean, simplify=false)
tapply(x, f, mean, simplify=FALSE)
tapply(x,f,range)
x
split(x,f)
lapply(split(x,f), mean)
tapply(x, f, mean)
library(datasets)
head(airquality)
?library
s <- split(airquality, airquality$Mont)
s
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar,R", "Wind")]))
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar,R", "Wind")])))
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar,R", "Wind")]))
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
s
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm = TRUE))
?colMeans
?gl
?interaction
interaction(1:4, 1:10)
interaction(10:1, 1:10)
a <- gl(2,4,8)
a
?gl
b <- gl(2,2,8)
b
b <- gl(2,2,8, labels=c("ctrl", "treat"))
b
interaction(a,b)
x <-rnorm(10)
f1 <- gl(2,5)
f2 <- gl(5,2)
f1
f2
str(split(x, list(f1, f2)))
list(f1,f2)
x
str(split(x, f1
)
?split
;
str(split(x, f1))
f1
split(x, f1)
interaction(f1, f2)
f1
f2
str(split(x, f1), drop = TRUE)
str(split(x, list(f1, f2)))
str(split(x, list(f1, f2)), drop=TRUE)
str(split(x, list(f1, f2), drop=TRUE)
)
?str
log(-1)
log(10)
log(8)
log(1)
?log
log(100)
log(10)
log2(8)
log10(100)
log(7.389)
mean(x)
traceback()
mean(-1)
mean(NaN)
mean(w)
traceback()
?lm
lm(y - x)
traceback()
noise()
debug(nise)
debug(noise)
noise(5, 1, 2)
library(datasets)
data(iris)
?iris
iris
head(iris)
s <- split(iris, iris$Species)
s
s
sapply (s, funciton(x) colMeans(x[,("Sepal.Length")]))
sapply (s, function(x) colMeans(x[,("Sepal.Length")]))
s$verginica
s$'verginica'
s
s
;
s$virginica
s$virginica[,"Sepal.Length"]
sapply (s, function(x) colMeans(x[,"Sepal.Length"]))
f = function(x) colMeans(x[, "Sepal.Length"])
f
f(iris)
iris
head(airquality)
s <- split(airquality, airqulity$Mont)
sa <- split(airquality, airquality$Month)
sa
fa <- function(x) colMeans([x, c("Ozone, "Solar,R","Wind")])
fa <- function(x) colMeans([x, c("Ozone, "Solar,R","Wind")])
fa <- function(x) colMeans(x[, c("Ozone, "Solar,R","Wind")])
fa <- function(x) colMeans(x[, c("Ozone, "Solar.R","Wind")])
fa <- function(x) colMeans(x[, c("Ozone", "Solar.R","Wind")])
fa(sa$'9')
f = function(x) colMeans(x[, c("Sepal.Length")])
head(s)
head(iris)
f(s$'setosa')
s$'setosa'
head(s$'setosa')
f
f(s$'setosa'))
f(s$'setosa')
traceback
f
?colMeans
?matrix
ma <- matrix(1:10, nrow=2, ncol=5, c("Row1", "Row2"))
ma <- matrix(1:10, nrow=2, ncol=5, dimname=c("Row1", "Row2"))
ma <- matrix(1:10, nrow=2, ncol=5, dimname=list("Row1", "Row2"))
ma <- matrix(1:10, nrow=2, ncol=5, dimname=list(, c("Row1", "Row2")))
ma <- matrix(1:10, nrow=2, ncol=5, dimname=list(NULL, c("Row1", "Row2")))
ma <- matrix(1:10, nrow=2, ncol=5)
ma
?colMeans
colMeans(ma)
ma[,1]
ma[,c(1,2)]
ma[,c(1,2,5)]
colMeans(ma[,c(1,2,5)])
head(iris)
s$'setosa'
s$'setosa'[,"Sepal.Length"]
f
f(s$'setosa'[,"Sepal.Length"])
colMeans(s$'setosa')
colMeans(
s$'setosa'["Sepal.Length", "Sepal.Width"])
s$'setosa'["Sepal.Length", "Sepal.Width"]
s$'setosa'[,"Sepal.Length", "Sepal.Width"]
s$'setosa'[, c("Sepal.Length", "Sepal.Width")]
colMeans(
s$'setosa'["Sepal.Length", "Sepal.Width"])
colMeans(s$'setosa'[, c("Sepal.Length", "Sepal.Width")])
sapply(s, function(x) colMeans(s$'setosa'[, c("Sepal.Length", "Sepal.Width")]))
sapply(s, function(x) colMeans(s$'setosa'[, c("Sepal.Length")]))
sapply(s, function(x) means(s$'setosa'[, c("Sepal.Length")]))
sapply(s, function(x) mean(s$'setosa'[, c("Sepal.Length")]))
sapply(s, function(x) mean(x))
sapply(s, function(x) mean(x[,c("Sepal.Length")]))
head(iris)
head(iris[1:4])
head(iris[1, 2, 5])
head(iris[c(1, 2, 5)])
?apply
x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
x
dimnames(x)[[1]] <- letters[1:8]
x
apply(x, 2, mean, trip=.2)
apply(x, 1, mean, trip=.2)
apply(x, c(1, 2), mean, trip=.2)
iris[1:4]
head(iris[1:4])
head(iris[, 1:4])
head(iris[1:3, 1:4])
apply(iris[,1:4], 2, mean)
data(mtcars)
head(mtcars)
split(mtcars, mtcars$cyl)
x <- c(rnorm(10), runif(10), rnorm(10,1))
x
s <- split(mtcars, mtcars$cyl)
s$'6'
tapply(mtcars$mpg, mtcars$cyl, mean)
head(iris)
tapply(iris$Sepal.Length, iris$Species, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
hp <- tapply(mtcars$hp, mtcars$cyl, mean)
hp
hp[1]
h['4']
hp['4']
hp['6'] - hp['4']
hp['8'] - hp['4']
debug(ls)
?ls
next
quit
q
;
?
;
?browse
?browser
where
?ls
ls
debug(ls)
ls
next
debug(ls)
ls
.Ob <- 1
ls(pattern = "O")
pattern
pattern
next
backtrace
traceback
setwd("/Users/syoshida/Documents/Coursera/Exploratory Data Analysis/ExData_Plotting1")
source("plot1.R")
df <- readData()
df <- readData()
plot1(df).draw()
plot1(df)$draw()
plot1(df)$saveToPNG()
source("plot1.R")
plot1(df)$draw()
plot1(df)$saveToPNG()
source("plot2.R")
plot2(df)$draw()
plot2(df)$saveToPNG()
source("plot2.R")
plot2(df)$saveToPNG()
source("plot3.R")
plot3(df)$draw()
plot3(df)$saveToPNG()
source("plot4.R")
plot4(df)$draw()
plot4(df)$saveToPNG()
